/*contenderos flexibles*/
/*selector de atributo*/
[class^="box"] {
  margin: 3rem auto;
  background-color: burlywood;
}

.box {
  width: 300px;
  height: 300px;
}

/*unidades relativas al contenedor padre
-el contenedor padre debe tener definida la altura en una unidad absoluta para que la asignacion de % para la altura funcione
-en este caso se usa viewport height porque el contenedor padre no tiene unidades absolutas definidas*/
.box-flex {
  width: 50%;
  height: 20vh;
}

/*Maximos y minimos - esto permite que la caja se redimensione de acuerdo a los maximos y minimos definidos
-si el contenido excede la altura definida este desbordara la caja
- no se deberia definir width y height despues de haber definido max y min, sobretodo si se definen en unidades absolutas
-las propiedades width y height tiene mayor peso especifico y alteraran el tamaño y la fluidez de la caja
- si se definen width y height en unidades relativas, tambien tomaran esta dimensiones pero si obedeceran los maximos y minimos segun el redimensionamiento*/
.box-flex-2 {
  max-width: 960px;
  min-width: 280px;
  max-height: 480px;
  min-height: 280px;
}

/*Regla css para hacer flexible elementos multimedia
- img
- audio
- video
- iframe
- canvas
- svg
- picture
- object
- embed
- map
- area
*
max-width: 100%
height: auto */

img,
video,
iframe {
  max-width: 100%;
  height: auto;
}

.responsive-media {
  position: relative;
  max-width: 100%;
  height: 0;
  /*formato widescreen 16:9
    16--->100%
    9---->?
    por eso el padding-bottom adopta ese %*/
  padding-bottom: 56.25%;
}

.responsive-media > * {
  position: absolute;
  width: 100%;
  height: 100%;
}
/*aplicando aspect-ratio al video*/
.aspect-ratio {
  aspect-ratio: 16/9;
}

.aspect-ratio-1-1 {
  aspect-ratio: 1/1;
}

/*media queries*/
@media print {
  @page {
    size: A5 landscape;
  }

  body {
    font-size: 10pt;
    font-family: sans-serif;
    color: whitesmoke;
  }
}

/*media querie para efecto de scroll*/
@media screen and (prefers-reduced-motion: no-preference) {
  html {
    scroll-behavior: auto;
    scroll-behavior: smooth;
  }
}

/*media querie para elegir dark/light mode*/
/* @media screen and (prefers-color-scheme: dark) {
  html {
    background-color: #000;
    color: whitesmoke;
  }
}

@media screen and (prefers-color-scheme: light) {
  html {
    background-color: #fff;
    color: darkred;
  }
} */

/*media querie para metodologia mobile first (min-width)
@media screen and (min-wiidth: 480px)

max-width para diseño desktop first

no mezclar min-width y max-width

definir una metodologia*/

/*Features queries*/

@supports (grid-template-columns: subgrid) {
  html {
    background-color: #000;
    color: whitesmoke;
  }
}

/*si el navegador no tiene soporte*/
@supports not (grid-template-columns: subgrid) {
  html {
    background-color: #000;
    color: whitesmoke;
  }
}

/*si el navegador soporta grid Y subgrid
con el operador and, ambas condiciones se deben cumplir */
@supports (display: grid) and (grid-template-columns: subgrid) {
  html {
    background-color: #000;
    color: whitesmoke;
  }
}

/*con el operador or, basta con que una de las condiciones se cumplan*/
@supports (display: grid) or (grid-template-columns: subgrid) {
  html {
    background-color: #fff;
    color: #000;
  }
}

/*Container queries*/
.card {
  border: thin solid #000;
  margin-left: auto;
  margin-right: auto;
  max-width: 800px;
  /*para activar la propiedad container querie*/
  contain: layout inline-size style;
}

.card-image {
  max-width: 100%;
  height: auto;
  object-fit: cover;
  object-position: 0 50%;
}

.card-content {
  padding: 1rem;
}

@container (min-width: 600px) {
  .card-container {
    display: flex;
  }

  .card-container > * {
    width: 50%;
    flex-basis: 50%;
  }
}

/*Grid fluida - sin media querie*/

.fluid-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
}

.fluid-item {
  border: thin solid gray;
  padding: 1rem;
}

/*texto fluido*/

/* @link https://utopia.fyi/type/calculator?c=320,18,1.2,1240,20,1.25,5,2,&s=0.75|0.5|0.25,1.5|2|3|4|6,s-l&g=s,l,xl,12 */

:root {
  --step--2: clamp(0.78rem, 0.77rem + 0.03vw, 0.8rem);
  --step--1: clamp(0.94rem, 0.92rem + 0.11vw, 1rem);
  --step-0: clamp(1.13rem, 1.08rem + 0.22vw, 1.25rem);
  --step-1: clamp(1.35rem, 1.28rem + 0.37vw, 1.56rem);
  --step-2: clamp(1.62rem, 1.5rem + 0.58vw, 1.95rem);
  --step-3: clamp(1.94rem, 1.77rem + 0.87vw, 2.44rem);
  --step-4: clamp(2.33rem, 2.08rem + 1.25vw, 3.05rem);
  --step-5: clamp(2.8rem, 2.45rem + 1.77vw, 3.82rem);
}

.step--2 {
  font-size: var(--step--2);
}

.step--1 {
  font-size: var(--step--1);
}

.step-0 {
  font-size: var(--step-0);
}

.step-1 {
  font-size: var(--step-1);
}

.step-2 {
  font-size: var(--step-2);
}

.step-3 {
  font-size: var(--step-3);
}

.step-4 {
  font-size: var(--step-4);
}

.step-5 {
  font-size: var(--step-5);
}

/*hack para tener textos fluidos
14 = tamaño de letra mas pequeño
18 = tamaño de letra mas grande
300 = tamaño de viewport mas pequeño
1400 = tamaño de viewport mas grande

body {
    font-size: calc(14px + (18 - 14)*((100vw - 300px)/(1400 - 300)));
*/

/*Contenedor fluido*/

.box-fluid {
  width: clamp(400px, 60vw, 600px);
  height: clamp(200px, 30vh, 300px);
}
